% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TsIO_classes.R
\docType{class}
\name{TsIO-class}
\alias{TsIO-class}
\alias{TsIO}
\alias{sequence_id,TsIO-method}
\alias{sequence_id<-,TsIO-method}
\alias{sequence_template,TsIO-method}
\alias{sequence_template<-,TsIO-method}
\alias{reverse_primer,TsIO-method}
\alias{reverse_primer<-,TsIO-method}
\alias{product_size_range,TsIO-method}
\alias{product_size_range<-,TsIO-method}
\alias{primer_num_return,TsIO-method}
\alias{primer_num_return<-,TsIO-method}
\alias{min_primer_region,TsIO-method}
\alias{min_primer_region<-,TsIO-method}
\alias{primer_opt_tm,TsIO-method}
\alias{primer_opt_tm<-,TsIO-method}
\alias{primer_min_tm,TsIO-method}
\alias{primer_min_tm<-,TsIO-method}
\alias{primer_max_tm,TsIO-method}
\alias{primer_max_tm<-,TsIO-method}
\alias{tapseq_primers,TsIO-method}
\alias{pcr_products,TsIO-method}
\title{TsIO class}
\usage{
TsIO(
  sequence_template,
  sequence_id = NA,
  reverse_primer,
  product_size_range,
  primer_num_return = 5,
  min_primer_region = 100,
  primer_opt_tm = NA,
  primer_min_tm = NA,
  primer_max_tm = NA
)

\S4method{sequence_id}{TsIO}(x)

\S4method{sequence_id}{TsIO}(x) <- value

\S4method{sequence_template}{TsIO}(x)

\S4method{sequence_template}{TsIO}(x) <- value

\S4method{reverse_primer}{TsIO}(x)

\S4method{reverse_primer}{TsIO}(x) <- value

\S4method{product_size_range}{TsIO}(x)

\S4method{product_size_range}{TsIO}(x) <- value

\S4method{primer_num_return}{TsIO}(x)

\S4method{primer_num_return}{TsIO}(x) <- value

\S4method{min_primer_region}{TsIO}(x)

\S4method{min_primer_region}{TsIO}(x) <- value

\S4method{primer_opt_tm}{TsIO}(x)

\S4method{primer_opt_tm}{TsIO}(x) <- value

\S4method{primer_min_tm}{TsIO}(x)

\S4method{primer_min_tm}{TsIO}(x) <- value

\S4method{primer_max_tm}{TsIO}(x)

\S4method{primer_max_tm}{TsIO}(x) <- value

\S4method{tapseq_primers}{TsIO}(x)

\S4method{pcr_products}{TsIO}(x)
}
\arguments{
\item{sequence_template}{A \code{\link[Biostrings]{DNAString}} object containing the sequence
template for which primers should be designed.}

\item{sequence_id}{Name (\code{character}) of the sequence template e.g. gene name.}

\item{reverse_primer}{Reverse primer sequence used for all PCR reactions.}

\item{product_size_range}{Numerical vector of length 2 specifying the desired length of the
resulting amplicons.}

\item{primer_num_return}{How many forward primers should be designed? (default: 5)}

\item{min_primer_region}{Minimum sequence length required for primer design. Relevant in case the
a sequence template is too short to allow the specified \code{product_size_range}.}

\item{primer_opt_tm, primer_min_tm, primer_max_tm}{Optimal, minumum and maximum primer melting
temperature.}

\item{x}{A \code{TsIO} object.}

\item{value}{A valid value to assign to the chosen slot.}

\item{tapseq_primers}{Slot where designed TAP-seq primers are stored. Not set by user.}

\item{pcr_products}{Slot where PCR products of primers are stored. Not set by user.}
}
\value{
A \code{TsIO} object.
}
\description{
TsIO objects store TAP-seq Primer3 input and output.
}
\details{
The TsIO class is based on the Boulder IO records used by Primer3
(\href{http://primer3.sourceforge.net/primer3_manual.htm}{Primer3 manual}). These objects allow
storing of required input such as the sequence template and additional Primer3 arguments
relevant for TAP-seq primer design. Once Primer3 is used to design TAP-seq primers based on
a TsIO object, the output is added to the TsIO object.

Use \code{TsIO()} to construct a new TsIO object from scratch.
}
\section{Methods (by generic)}{
\itemize{
\item \code{sequence_id}: Get sequence id

\item \code{sequence_id<-}: Set sequence_id

\item \code{sequence_template}: Get sequence_template

\item \code{sequence_template<-}: Set sequence_template

\item \code{reverse_primer}: Get reverse_primer

\item \code{reverse_primer<-}: Set reverse_primer

\item \code{product_size_range}: Get product_size_range

\item \code{product_size_range<-}: Set product_size_range

\item \code{primer_num_return}: Get primer_num_return

\item \code{primer_num_return<-}: Set product_size_range

\item \code{min_primer_region}: Get min_primer_region

\item \code{min_primer_region<-}: Set product_size_range

\item \code{primer_opt_tm}: Get primer_opt_tm

\item \code{primer_opt_tm<-}: Set product_size_range

\item \code{primer_min_tm}: Get primer_min_tm

\item \code{primer_min_tm<-}: Set product_size_range

\item \code{primer_max_tm}: Get primer_max_tm

\item \code{primer_max_tm<-}: Set product_size_range

\item \code{tapseq_primers}: Get tapseq_primers

\item \code{pcr_products}: Get pcr_products
}}

\examples{
library(TAPseq)

# get example sequence templates
data("chr11_sequence_templates")
tx_seq <- chr11_sequence_templates[[1]]
tx_id <- names(chr11_sequence_templates)[1]

# reverse primer used in all PCR reactions
reverse_primer <- "AAGCAGTGGTATCAACGCAGAGT"

# create TsIO object
obj <- TsIO(sequence_template = tx_seq, sequence_id = tx_id, reverse_primer = reverse_primer,
            product_size_range = c(350, 500))

# different slot values can be accessed using accessor functions
sequence_template(obj)
sequence_id(obj) <- "Gene1"
sequence_id(obj)
}
\seealso{
\url{http://primer3.org/manual.html} for Primer3 manual.
}
