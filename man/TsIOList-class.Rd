% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TsIO_classes.R
\docType{class}
\name{TsIOList-class}
\alias{TsIOList-class}
\alias{TsIOList}
\alias{sequence_template,TsIOList-method}
\alias{tapseq_primers,TsIOList-method}
\alias{pcr_products,TsIOList-method}
\title{TsIOList class}
\usage{
TsIOList(...)

\S4method{sequence_template}{TsIOList}(x)

\S4method{tapseq_primers}{TsIOList}(x)

\S4method{pcr_products}{TsIOList}(x)
}
\arguments{
\item{...}{Multiple TsIO objects from which a TsIOList object should be created.}

\item{x}{A \code{TsIOList} object.}
}
\value{
A \code{TsIOList} object.
}
\description{
TsIOList class is a container to store multiple \code{\link[TAPseq]{TsIO}} objects. This enables
storing of Primer3 input and output for multiple target genes.
}
\section{Methods (by generic)}{
\itemize{
\item \code{sequence_template}: Get sequence_templates

\item \code{tapseq_primers}: Get tapseq_primers

\item \code{pcr_products}: Get pcr_products
}}

\examples{
library(TAPseq)

# get example sequence templates
data("chr11_sequence_templates")
txs_seqs <- chr11_sequence_templates[1:2]
txs_ids  <- names(txs_seqs)

# reverse primer used in all PCR reactions
reverse_primer <- "CTACACGACGCTCTTCCGATCT"

# create TsIO objects
tsio1 <- TsIO(sequence_template = txs_seqs[[1]], sequence_id = txs_ids[1],
              reverse_primer = reverse_primer, product_size_range = c(350, 500))

tsio2 <- TsIO(sequence_template = txs_seqs[[2]], sequence_id = txs_ids[2],
              reverse_primer = reverse_primer, product_size_range = c(350, 500))

# create TsIOList object
obj <- TsIOList(tsio1, tsio2)

# it's noteworthy that when creating a TsIOList from a DNAStringSet of sequence templates, it's
# easier to use TAPseqInput()
?TAPseqInput

# as with TsIO objects, some slot values can be accessed using accessor functions
sequence_template(obj)
}
\seealso{
\link[TAPseq]{TsIO}
}
